#include "global_declarations.h"
#include "basic_functions.h"

/****to compute left and right state****/

template <typename T>
T VanAlbada_Limiter(T del_plus, T del_minus);

void LR_State(int ib, int imax, double *&x, double **&cv, double *&p, double **&L_state, double **&R_state){
	
	double **du, dx;
	
	du=Allocate_2D(du, ndvar, imax+1);

	if(space_accuracy=="1"){
		for(int i=1; i<=ib;i++){
	
			R_state[0][i] = cv[0][i+1]; //rho
			R_state[1][i] = cv[1][i+1]/cv[0][i+1]; //u
        		R_state[2][i] = p[i+1];	

			L_state[0][i] = cv[0][i]; //rho
			L_state[1][i] = cv[1][i]/cv[0][i]; //u
        		L_state[2][i] = p[i];	

		}
	}

	else if	(space_accuracy=="2"){
		for(int i=1; i<=ib;i++){

			du[0][i] = cv[0][i+1]-cv[0][i]; //rho
			du[1][i] = cv[1][i+1]/cv[0][i]-cv[1][i]/cv[0][i]; //u
			du[2][i] = p[i+1]-p[i]; //p
		}

		du[0][0] = du[0][1];
		du[1][0] = du[1][1];
		du[2][0] = du[2][1];

		du[0][imax] = du[0][ib];
		du[1][imax] = du[1][ib];
		du[2][imax] = du[2][ib];

		for(int i=1; i<=ib;i++){
		
			dx = sqrt((x[i]-x[i-1])*(x[i]-x[i-1]));

			L_state[0][i] = cv[0][i]	  + 0.5*VanAlbada_Limiter(du[0][i], du[0][i-1])*dx; //rho
			L_state[1][i] = cv[1][i]/cv[0][i] + 0.5*VanAlbada_Limiter(du[1][i], du[1][i-1])*dx; //u
			L_state[2][i] = p[i]	          + 0.5*VanAlbada_Limiter(du[2][i], du[2][i-1])*dx; //p

			dx = sqrt((x[i+1]-x[i])*(x[i+1]-x[i]));

			R_state[0][i] = cv[0][i+1]	      - 0.5*VanAlbada_Limiter(du[0][i+1], du[0][i])*dx; //rho
			R_state[1][i] = cv[1][i+1]/cv[0][i+1] - 0.5*VanAlbada_Limiter(du[1][i+1], du[1][i])*dx; //u
			R_state[2][i] = p[i+1]		      - 0.5*VanAlbada_Limiter(du[2][i+1], du[2][i])*dx; //p
			
		}

	}

	Delete_2D(du, ndvar);
}


template <typename T>
T VanAlbada_Limiter(T del_plus, T del_minus){

	const double	omega=1e-12;
	double r;

	del_minus = Sign(del_minus)*(fabs(del_minus)+omega);

	r=del_plus/(del_minus+1e-20);

	return ((r*r+r)/(r*r+1.0));
}
